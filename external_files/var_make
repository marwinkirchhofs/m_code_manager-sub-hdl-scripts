
ifndef _VAR_MAKE_
_VAR_MAKE_ := 1

# global variables for the hierarchical make build/sim system
# 
# All variables that are not globally needed are defined in the respective 
# sub-makefiles

FILE_USER_MK        := user.mk

##############################
# DIRECTORY
##############################

# This makefile gets included by subdirectory makefiles. Thus, without providing
# it with an absolute path any wildcard expansion would be executed relative
# from the respective working directory. For globally providing a list of source
# files, that doesn't work. These lines provide the directory of this
# variable passing makefile, effectively the project's top-level directory.
DIR_PRJ_TOP		:= $(abspath $(dir $(lastword ${MAKEFILE_LIST})))
PRJ_NAME		:= $(notdir ${DIR_PRJ_TOP})

DIR_SCRIPTS     := ${DIR_PRJ_TOP}/scripts
DIR_SIM         := ${DIR_PRJ_TOP}/sim
DIR_TB			:= ${DIR_PRJ_TOP}/tb
DIR_RTL         := ${DIR_PRJ_TOP}/rtl
# DIR_XIPS        := ${DIR_PRJ_TOP}/xips
DIR_INCL		:= ${DIR_PRJ_TOP}/include
DIR_BUILD		:= ${DIR_PRJ_TOP}/build
DIR_CONSTRAINTS	:= ${DIR_PRJ_TOP}/constraints
DIR_SW			:= ${DIR_PRJ_TOP}/sw
DIR_SW_SRC		:= ${DIR_SW}/src

SCRIPT_MANAGE_BUILDS		:= ${DIR_SCRIPTS}/manage_build_files.bash
SCRIPT_CREATE_SIM_SCRIPTS	:= ${DIR_SCRIPTS}/create_sim_scripts.bash

FILE_PROJECT_CONFIG	:= ${DIR_PRJ_TOP}/project_config.json
FILE_BUILD_CONFIG	:= ${DIR_PRJ_TOP}/build_config.json
FILE_READ_JSON_VAR	:= ${DIR_SCRIPTS}/get_json_variable.py

##############################
# TOOL SETTINGS
##############################

SHELL			:= bash


# XIL_TOOL 		:= vivado
# XIL_PRJ_NAME	:= my_prj
# DIR_XIL_PRJ		:= ${DIR_PRJ_TOP}_vivado_prj
# XIL_PRJ			:= ${DIR_XIL_PRJ}/${XIL_PRJ_NAME}.xpr
# DIR_XIL_PRJ_XIPS	:= ${DIR_XIL_PRJ}/${XIL_PRJ_NAME}.srcs/sources_1/ip

fun_get_prj_config_var	= $(shell python3 ${FILE_READ_JSON_VAR} ${FILE_PROJECT_CONFIG} $(1) )
fun_get_build_config_var	= $(shell python3 ${FILE_READ_JSON_VAR} ${FILE_BUILD_CONFIG} $(1) )

##############################
# PROJECT
##############################

# select the simulation flow to be used:
# "verilator", "modelsim", "questasim"
SIMULATOR		:= $(call fun_get_prj_config_var,simulator)
SIM_TOP			:= $(call fun_get_prj_config_var,sim_top)
HW_TOP			:= $(call fun_get_build_config_var,top)
PROJECT_TYPE	:= $(call fun_get_prj_config_var,project_type)

# (can't be specified on top with the other scripts, because we need SIMULATOR 
# first)
SCRIPT_RUN_SIM				:= ${DIR_SIM}/${SIMULATOR}/run_sim.do
SCRIPT_PREPARE_SIM			:= ${DIR_SIM}/${SIMULATOR}/prepare_sim.sh
SCRIPT_OPT_SIM				:= ${DIR_SIM}/${SIMULATOR}/opt_sim.sh

##############################
# RTL SOURCES
##############################

DIR_LIST_RTL_INCL	:= $(shell find ${DIR_RTL} -type d -name "include")
DIR_LIST_RTL_INCL	+= ${DIR_INCL}

SRC_RTL_INCL		:= $(wildcard ${DIR_INCL}/*.svh)
SRC_RTL_INCL		+= $(wildcard ${DIR_INCL}/*.vh)
SRC_RTL_INCL		+= $(wildcard ${DIR_RTL}/*.svh)
SRC_RTL_INCL		+= $(wildcard ${DIR_RTL}/*.vh)
SRC_RTL_INCL		+= $(wildcard ${DIR_RTL}/*/*.svh)
SRC_RTL_INCL		+= $(wildcard ${DIR_RTL}/*/*.vh)

SRC_RTL_SV_ALL		:= $(wildcard ${DIR_RTL}/*.sv)
SRC_RTL_SV_ALL		+= $(wildcard ${DIR_RTL}/*/*.sv)
SRC_RTL_SV_IF		:= $(wildcard ${DIR_RTL}/ifc_*.sv)
SRC_RTL_SV_IF		+= $(wildcard ${DIR_RTL}/*/ifc_*.sv)
SRC_RTL_SV_PKG		:= $(wildcard ${DIR_RTL}/*_pkg.sv)
SRC_RTL_SV_PKG		+= $(wildcard ${DIR_RTL}/*/*_pkg.sv)
SRC_RTL_SV_MODULES	:= $(filter-out ${SRC_RTL_SV_IF} ${SRC_RTL_SV_PKG},${SRC_RTL_SV_ALL})
SRC_RTL_V_ALL		:= $(wildcard ${DIR_RTL}/*.v)
SRC_RTL_V_ALL		+= $(wildcard ${DIR_RTL}/*/*.v)
# specifically selecting in an attempt to follow compile order
SRC_RTL_VLOG		:= \
					   ${SRC_RTL_SV_IF} \
					   ${SRC_RTL_SV_PKG} \
					   ${SRC_RTL_V_ALL} \
					   ${SRC_RTL_SV_MODULES}
SRC_RTL_VHDL		:= $(wildcard ${DIR_RTL}/*.vhd)
SRC_RTL_VHDL		+= $(wildcard ${DIR_RTL}/*/*.vhd)

SRC_RTL				:= ${SRC_RTL_VLOG} ${SRC_RTL_VHDL}

SRC_TB_SV_ALL		:= $(wildcard ${DIR_TB}/*.sv)
SRC_TB_SV_ALL		+= $(wildcard ${DIR_TB}/*/*.sv)
SRC_TB_SV_ALL		+= $(wildcard ${DIR_RTL}/*/tb/*.sv)
SRC_TB_SV_AGENT		:= $(wildcard ${DIR_TB}/*/agent_*.sv)
SRC_TB_SV_AGENT		+= $(wildcard ${DIR_RTL}/*/tb/agent_*.sv)
SRC_TB_SV_IF		:= $(wildcard ${DIR_TB}/ifc_*.sv)
SRC_TB_SV_IF		+= $(wildcard ${DIR_TB}/*/ifc_*.sv)
SRC_TB_SV_IF		+= $(wildcard ${DIR_RTL}/*/tb/ifc_*.sv)
SRC_TB_SV_PKG		:= $(wildcard ${DIR_TB}/*_pkg.sv)
SRC_TB_SV_PKG		+= $(wildcard ${DIR_TB}/*/*_pkg.sv)
SRC_TB_SV_PKG		+= $(wildcard ${DIR_RTL}/*/tb/*_pkg.sv)
SRC_TB_SV_MODULES	:= $(filter-out \
					   ${SRC_TB_SV_IF} ${SRC_TB_SV_PKG} ${SRC_TB_SV_AGENT},${SRC_TB_SV_ALL})

SRC_SW_C			:= $(wildcard ${DIR_SW_SRC}/*.c)
SRC_SW_CPP			:= $(wildcard ${DIR_SW_SRC}/*.cpp)
SRC_SW_H			:= $(wildcard ${DIR_SW_SRC}/*.h)
SRC_SW_ALL			:= ${SRC_SW_C} ${SRC_SW_CPP} ${SRC_SW_H}

FILE_COMPILE_ORDER_RTL	:= ${DIR_RTL}/compile_order
FILE_COMPILE_ORDER_TB	:= ${DIR_TB}/compile_order
COMPILE_ORDER_RTL	:= $(addprefix \
		${DIR_RTL}/,$(shell [[ -f ${FILE_COMPILE_ORDER_RTL} ]] && cat ${FILE_COMPILE_ORDER_RTL}))
COMPILE_ORDER_TB	:= $(addprefix \
		${DIR_TB}/,$(shell [[ -f ${FILE_COMPILE_ORDER_TB} ]] && cat ${FILE_COMPILE_ORDER_TB}))

# how to get the names of all defined modules?
# - we need to remove everything but the module name from the list of sources
#   -> basename (notdir ...)
# - we need to filter out any package or interface
#   -> filter-out (...)
# (filter-out only interprets the first '%' as a wildcard, that's why we need to
# strip the file names first such that _pkg/_if is at the end of the remaining
# string)
SRC_MODULES     := $(filter-out %_pkg %_if, $(basename $(notdir ${SRC_RTL})))
# XIL_DEBUG_CORE_FILES := $(addsuffix .tcl,                                   \
#                             $(addprefix ${DIR_XIPS}/xips_debug_cores_,${SRC_MODULES}))

# how to get the file names of all module-files (meaning all module file names 
# that don't have _if or _pkg in them? We can't first strip the file ending as 
# above, because then we don't know anymore what the file ending was.
fun_filter_within_str = $(foreach v,$2,$(if $(findstring $1,$v),,$v))
SRC_MODULE_FILES := $(call fun_filter_within_str,_pkg,${SRC_RTL})

# SRC_RTL_HLS		:= $(wildcard ${DIR_PRJ_TOP}/hls/*/verilog/*.v)

##############################
# SIMULATION SOURCES
##############################

SRC_SIM_CPP_INCL	:= ${DIR_PRJ_TOP}/tb
# SRC_SIM_CPP_INCL	:= ${DIR_PRJ_TOP}/tb \
# 					   ${DIR_PRJ_TOP}/tb/sysc_axi \
# 					   ${DIR_PRJ_TOP}/hls/axi_counter/drivers
# SRC_SIM_SYSC	:= 	$(wildcard ${DIR_PRJ_TOP}/tb/sysc_axi/*.cpp) \
# 					$(wildcard ${DIR_PRJ_TOP}/sw/*.cpp)

SIM_ARGS			:= $(call fun_get_prj_config_var,sim_args_${SIMULATOR})
SIM_DEFINE			:= $(call fun_get_prj_config_var,sim_define)
SIM_VERBOSITY		:= $(call fun_get_prj_config_var,sim_verbosity)

# TODO: once that is needed (should it ever be needed), integrate 
# hls_export_lang into project_config.json and fetch it from there
# # HLS
# # set up the hls export language (either verilog or vhdl)
# HLS_EXPORT_LANG	:= verilog
# 
# ifeq (${HLS_EXPORT_LANG},verilog)
# HLS_EXPORT_LANG_SUFFIX	:= v
# else
# ifeq (${HLS_EXPORT_LANG},vhdl)
# HLS_EXPORT_LANG_SUFFIX	:= vhd
# endif
# endif

# ##############################
# # IP SOURCES
# ##############################
# 
# # TODO: this way, LIST_XIPS will also contain old IPs which are not present in 
# # the project anymore. I mean, in that case they also shouldn't really be in the 
# # vivado directory anymore, so the fix is much more that at any update, you 
# # remove the sources for the IPs that are not needed anymore
# LIST_XIPS				:= $(shell ls ${DIR_XIL_PRJ_XIPS} 2>/dev/null)
# LIST_XIPS_XCI			:= $(wildcard ${DIR_XIL_PRJ_XIPS}/*/*.xci)
# DIR_XIPS_SIM_OUT		:= ${DIR_SIM}/${SIMULATOR}/xip_sim_export
# # list of all xips with exported simulation scripts (this one is accurate as 
# # opposed to LIST_XIPS, because the directories that are present actually origin 
# # from the project (which gets cleaned before every export))
# # TODO: come up with something that causes this thing not to complain if the 
# # directory is not there, and instead just be empty
# LIST_XIPS_SIM			= $(shell ls ${DIR_XIPS_SIM_OUT} 2> /dev/null)
# DIR_XIL_IP_PRECOMPILE	:= $(call fun_get_prj_config_var,xil_ip_precompile_path)/${SIMULATOR}

##############################
# OTHERS
##############################

MAKE_DUMMY_SIM_RTL_COMP_SUCCESS	:= ${SIMULATOR}/.rtl_compilation_successful

endif

# vim: filetype=make
